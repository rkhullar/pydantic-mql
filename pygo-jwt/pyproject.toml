[build-system]
requires = ["pygo-tools"]
#requires = ["pygo-tools @ git+https://github.com/rkhullar/python-libraries.git@main#subdirectory=pygo-tools"]
build-backend = "pygo_tools.backend"

[project]
name = "pygo-jwt"
dynamic = ["version"]
keywords = ["python", "golang", "jwt", "rsa"]
description = "Encode and Decode RS256 JSON Web Tokens with Python and Go"
readme = "readme.md"
license = {text = "MIT NON-AI License"}
requires-python = ">= 3.10, <4.0"
authors = [
    {name = "Rajan Khullar", email = "rkhullar03@gmail.com"}
]

[project.urls]
Repository = "https://github.com/rkhullar/python-libraries/tree/main/pygo-jwt"

[tool.setuptools]
packages = ["pygo_jwt", "pygo_tools_lib"]

[tool.setuptools.dynamic]
version = {attr = "pygo_jwt.__version__"}

[tool.pygo-tools]
package    = "pygo_jwt"
extension  = "_rsa_util"
library    = "rsautil"
signatures = [
    "typedef struct string_with_error {char* data; char* error;} StringWithError;",
    "typedef struct bool_with_error {bool data; char* error;} BoolWithError;",
    "StringWithError* NewJWK(int size, char* id);",
    "StringWithError* JWKToPEM(char* json_data);",
    "StringWithError* PEMToJWK(char* pem, char* id);",
    "StringWithError* ExtractPublicJWK(char* key);",
    "StringWithError* ExtractPublicPEM(char* key);",
    "StringWithError* ParseJWKAndSign(char* key, char* data);",
    "StringWithError* ParsePEMAndSign(char* key, char* data);",
    "BoolWithError* ParsePublicJWKAndVerify(char* key, char* data, char* signature);",
    "BoolWithError* ParsePublicPEMAndVerify(char* key, char* data, char* signature);",
    "void ExampleGo(int n);",
    "StringWithError* MaybeError(int n);",
    "void FreeString(char* data);",
    "void FreeStringWithError(StringWithError* object);",
    "void FreeBoolWithError(BoolWithError* object);"
]